---
title: "107_gam_nested   "
format: 
  html:
    toc: true
    code-fold: true  
editor: visual
---

-   Use model s(x,y) + s(year)  
-   *New here: also nesting water catchements*  
-   Use ordinary spatial thin-plate smooth, i.e. default version of s(x,y) instead of soap-film smoother
-   Using data for all Europe

## 1. Packages

```{r, include=FALSE}

# Many of these packages cn be loaded at once using library(tidyverse). (I just like to be specific.)
library(mgcv)
library(dplyr)       # tidyverse 
library(ggplot2)     # tidyverse
library(viridis)     # for scale_color_viridis  
library(forcats)     # tidyverse
library(purrr)       # tidyverse
library(glue)        # tidyverse, easier alternative to paste0
library(tictoc)      # tic() and toc() for timing   
library(terra)       # spatial functions  

country_borders <- readRDS("Input_data/country_borders.rda")

```

```{r}

knitr::opts_chunk$set(results = 'hold') # collect the results from a chunk  

```

## 2. Data

```{r}

dat <- readRDS("Input_data/WISE_GWNO3_sel2.rda") %>%
  filter(year >= 1992) %>%
  mutate(log_no3 = log10(no3))

```

## 3. Map data for land

### Europe, land, from Natural Earth website

```{r}

# help(package = "terra")

# SpatVector from file
f <- "ne_50m_land/ne_50m_land.shp"
# f <- "ne_110m_land/ne_110m_land.shp"
boundary_land_all <- vect(f)


# crop with an extent
ex <- ext(-10, 50, 30, 73)
boundary_land <- crop(boundary_land_all, ex)
plot(boundary_land, main = "Original map (Mercator)")  



```

### Project to ETRS89

```{r}

# Project to ETRS89  
crs_ETRS89_extended <- "+proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs"
boundary_land2 <- project(boundary_land, crs_ETRS89_extended)
plot(boundary_land2, main = "Map in ETRS89 projection")  

```

## 4. Map using data fram R's 'world' data

-   See script 101

### Select countries

```{r}

regions <- c("Portugal", "Iceland", "Ireland", "Spain", "UK",
             "Isle of Man", "Guernsey", "Jersey", "Andorra", "France", "Belgium", 
             "Netherlands", "Luxembourg", "Monaco", "Switzerland", "Liechtenstein", 
             "Denmark", "Germany", "Italy", "San Marino", "Norway", 
             "Vatican", "Austria", "Slovenia", "Sweden", "Czech Republic", 
             "Malta", "Croatia", "Poland", "Bosnia and Herzegovina", "Slovakia", 
             "Hungary", "Finland", "Montenegro", "Albania", "Serbia", "Kosovo", 
             "Lithuania", "Estonia", "Latvia", "North Macedonia", "Romania", 
             "Greece", "Belarus", "Bulgaria", "Moldova", "Ukraine", "Cyprus", 
             "Turkey")

country_borders <- readRDS("Input_data/country_borders.rda") %>%
  filter(region %in% regions & !subregion %in% c("Svalbard", "Jan Mayen")) 

# ggplot(country_borders %>% filter(region == "France"), aes(x,y)) +
#   geom_path(aes(group = subregion))  

ggplot(country_borders, aes(x,y)) +
  geom_path(aes(group = group))  

# ALTERNATIVE: use data from Natueral Earth web site  
# borders_all <- vect("ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp")
# # Choose data based on "regions" vactor as defined above  
# borders_european <- borders_all[borders_all$SOVEREIGNT %in% regions,]
# plot(borders_european)

```

#### For making 'countries' vector above

```{r}

if (FALSE){
  country_borders %>% 
    filter(is.na(subregion)) %>%
    group_by(region) %>%
    summarise(across(c(x,y), mean)) %>%
    filter(x > 0 & x < 5000 & y > 0 & y < 10000) %>%
    ggplot(aes(x,y)) +
    # geom_point() +
    geom_text(aes(label = region))
  
  country_borders %>% 
    filter(is.na(subregion)) %>%
    group_by(region) %>%
    summarise(across(c(x,y), mean)) %>%
    filter(x > 0 & x < 5000 & y > 0 & y < 10000) %>%
    arrange(x) %>%
    pull(region) %>%
    dput()
}



```

### Make vector object

```{r}



```

### Show data

```{r}

ggplot(dat, aes(x,y)) +
  geom_point(aes(color = log_no3)) +
  scale_color_viridis() +
  annotate("path", x = country_borders$x, y = country_borders$y, group = country_borders$group) +
  coord_fixed()  +
  theme_bw()

```


## 5. GAM, additive effects of space and time


### Additive space and year effects, with nesting  


#### Test with a subset of the data  

```{r}

tab <- table(dat$waterbody)
# length(tab)
# range(tab)
# table(cut(tab, breaks = c(1,2,5,10,100,500,3000), right = FALSE))

# Pick random waterbodies  
set.seed(99)
random_waterbodies <- sample(names(tab), 500, replace = FALSE)
dat_sel <- dat %>%
  filter(waterbody %in% random_waterbodies) %>%
  # NOTE - we also need to set a NUMERCI variable for waterbody:
  mutate(waterbody_n = as.numeric(factor(waterbody)))


tic()
m1a <- gam(log_no3 ~ s(x, y, k=200) + s(year, k = 5),
            data = dat_sel)
toc()   # 96 sec for k = 200  

tic()
m1b <- gam(log_no3 ~ s(x, y, bs = "gp") + s(year, k = 5),
            data = dat_sel)
toc()   # 96 sec for k = 200  

tic()
m2 <- gam(log_no3 ~ s(year, k = 5) + s(x, y, k=200) + 
            s(waterbody_n, bs="re") + s(year, waterbody_n, bs="re") ,
            data = dat_sel)
toc()   # 96 sec for k = 200  

```

### Model 

```{r}

# NOTE - we also need to set a NUMERCI variable for waterbody:
dat <- dat %>%
  mutate(waterbody_n = as.numeric(factor(waterbody)))

if (FALSE){
  
  tic()
  mod2a <- gam(log_no3 ~ s(year, k = 5) + s(x, y, k=200) + 
              s(waterbody_n, bs="re") + s(year, waterbody_n, bs="re") ,
              data = dat)
  mod2b <- gam(log_no3 ~ s(year, k = 5) + s(x, y, k=200) + 
              s(waterbody_n, bs="re") + s(year, waterbody_n, bs="re")  + 
                s(x, y, waterbody_n, bs="re") ,
            data = dat)
  toc()   # 75 sec for k = 200  
  
  saveRDS(mod2a, "Data/107_mod2a.rds")
  saveRDS(mod2b, "Data/107_mod2b.rds")
  
}

# Read saved data  
mod2 <- readRDS("Data/107_mod2a.rds")
#mod2 <- readRDS("Data/107_mod2b.rds")

gam.vcomp(mod2)

plot(mod2) ## default plot

```
### Aggregating by water bodies instead  

```{r}

datagg <- dat %>%
  group_by(
    countryCode, waterbody, x, y, year) %>%
  summarize(
    log_no3 = mean(log_no3)
  )

if (T){
  
  tic()
  mod2 <- gam(log_no3 ~ s(year, k = 5) + s(x, y, k=200),
              data = datagg)
  toc()   # 75 sec for k = 200  
  
  saveRDS(mod2, "Data/107_mod2_agg.rds")

}

# Read saved data  
mod2 <- readRDS("Data/107_mod2_agg.rds")

plot(mod2) ## default plot


```

### Percentage change since 1992  

* The change in percentage is the same everywhere (since the changes on log scale are the same anywhere, as we used an additive model)  
* *The total change is about 20%*  

```{r}

# Example points 
plot_data <- pdata %>% 
  # Pick a random point
  filter(x == 2500 & y == 2000) %>%
  mutate(
    no3_1992 = no3[year == 1992],
    perc_change_since_1992 = 100*(no3 - no3_1992)/no3_1992) %>%
  ungroup()
  
ggplot(plot_data, aes(year, perc_change_since_1992)) +
  geom_line() +
  labs(
    title = "Percentage change",
    y = "Change since 1992 (%)",
    x = "Year") +
  theme_bw()

```

### Percentage change since 1992, for two random points  

* Just to check: the two are identical - as expected   

```{r}

# Example points 
example_coor <- data.frame(
  text = c("Norway", "France"),
  x = c(2500, 2000),
  y = c(3100, 2000)
)

plot_data <- pdata %>% 
  left_join(example_coor, by = c("x","y")) %>% 
  filter(!is.na(text)) %>%
  group_by(text) %>%
  mutate(
    no3_1992 = no3[year == 1992],
    perc_change_since_1992 = 100*(no3 - no3_1992)/no3_1992) %>%
  ungroup()
  
ggplot(plot_data, aes(year, perc_change_since_1992)) +
  geom_line() +
  facet_wrap(vars(text))

```

