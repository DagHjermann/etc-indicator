---
title: "108_gam_wb_level"
format: 
  html:
    toc: true
    code-fold: true  
editor: visual
---

-   Split ana√∏ysis in analyses on Water body level and full analysis  
-   Use model s(year) (w/ bootstrap?) for each water body 
-   Then use use predictions from those to model s(x,y) + s(year)     
-   Use ordinary spatial thin-plate smooth, i.e. default version of s(x,y) instead of soap-film smoother
-   Using data for all Europe

## 0. Settings  
```{r}

rerun_gam_fitting <- FALSE
rerun_gam_predictions <- FALSE

```


## 1. Packages

```{r, include=FALSE}

# Many of these packages cn be loaded at once using library(tidyverse). (I just like to be specific.)

library(mgcv)        # gam 
library(dplyr)       # tidyverse 
library(ggplot2)     # tidyverse plots
library(ggeasy)      # for use with ggplot 
library(viridis)     # for scale_color_viridis  
library(forcats)     # tidyverse
library(purrr)       # tidyverse
library(glue)        # tidyverse, easier alternative to paste0
library(tictoc)      # tic() and toc() for timing   
library(terra)       # spatial functions  

country_borders <- readRDS("Input_data/country_borders.rda")

```

```{r}

knitr::opts_chunk$set(results = 'hold') # collect the results from a chunk  

```

## 2. Data  

```{r}

dat <- readRDS("Input_data/WISE_GWNO3_sel3.rda") %>%
  mutate(log_no3 = log10(no3))

nrow(dat)

table(dat$sitegroup)

dat %>%
  distinct(site, sitegroup) %>%
  count(sitegroup)

```

## 3. Map data for land

### Europe, land, from Natural Earth website

```{r}

# help(package = "terra")

# SpatVector from file
f <- "ne_50m_land/ne_50m_land.shp"
# f <- "ne_110m_land/ne_110m_land.shp"
boundary_land_all <- vect(f)


# crop with an extent
ex <- ext(-10, 50, 30, 73)
boundary_land <- crop(boundary_land_all, ex)
plot(boundary_land, main = "Original map (Mercator)")  



```

### Project to ETRS89

```{r}

# Project to ETRS89  
crs_ETRS89_extended <- "+proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs"
boundary_land2 <- project(boundary_land, crs_ETRS89_extended)
plot(boundary_land2, main = "Map in ETRS89 projection")  

```

## 4. Map using data fram R's 'world' data

-   See script 101

### Select countries

```{r}

regions <- c("Portugal", "Iceland", "Ireland", "Spain", "UK",
             "Isle of Man", "Guernsey", "Jersey", "Andorra", "France", "Belgium", 
             "Netherlands", "Luxembourg", "Monaco", "Switzerland", "Liechtenstein", 
             "Denmark", "Germany", "Italy", "San Marino", "Norway", 
             "Vatican", "Austria", "Slovenia", "Sweden", "Czech Republic", 
             "Malta", "Croatia", "Poland", "Bosnia and Herzegovina", "Slovakia", 
             "Hungary", "Finland", "Montenegro", "Albania", "Serbia", "Kosovo", 
             "Lithuania", "Estonia", "Latvia", "North Macedonia", "Romania", 
             "Greece", "Belarus", "Bulgaria", "Moldova", "Ukraine", "Cyprus", 
             "Turkey")

country_borders <- readRDS("Input_data/country_borders.rda") %>%
  filter(region %in% regions & !subregion %in% c("Svalbard", "Jan Mayen")) 

# ggplot(country_borders %>% filter(region == "France"), aes(x,y)) +
#   geom_path(aes(group = subregion))  

ggplot(country_borders, aes(x,y)) +
  geom_path(aes(group = group))  

# ALTERNATIVE: use data from Natueral Earth web site  
# borders_all <- vect("ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp")
# # Choose data based on "regions" vactor as defined above  
# borders_european <- borders_all[borders_all$SOVEREIGNT %in% regions,]
# plot(borders_european)

```

#### For making 'countries' vector above

```{r}

if (FALSE){
  country_borders %>% 
    filter(is.na(subregion)) %>%
    group_by(region) %>%
    summarise(across(c(x,y), mean)) %>%
    filter(x > 0 & x < 5000 & y > 0 & y < 10000) %>%
    ggplot(aes(x,y)) +
    # geom_point() +
    geom_text(aes(label = region))
  
  country_borders %>% 
    filter(is.na(subregion)) %>%
    group_by(region) %>%
    summarise(across(c(x,y), mean)) %>%
    filter(x > 0 & x < 5000 & y > 0 & y < 10000) %>%
    arrange(x) %>%
    pull(region) %>%
    dput()
}



```



### Show data

```{r}

ggplot(dat, aes(x,y)) +
  geom_point(aes(color = log_no3)) +
  scale_color_viridis() +
  annotate("path", x = country_borders$x, y = country_borders$y, group = country_borders$group) +
  coord_fixed()  +
  theme_bw()

```

## 5. Data to use for predictions

### Spatial grid before filtering, as data frame

```{r}

dx <- 50
dy <- 50
x_min <- dx*round(min(dat$x)/dx)
x_max <- dx*round(max(dat$x)/dx)
y_min <- dy*round(min(dat$y)/dy)
y_max <- dy*round(max(dat$y)/dy)
grid.x <- seq(x_min, x_max, by = dx)
grid.y <- seq(y_min, y_max, by = dy)
full_grid <- expand.grid(x = grid.x, y = grid.y)  

full_grid <- full_grid %>%
  # Add index (will be used for selecting data within country borders)
  mutate(i = 1:nrow(full_grid)) %>%
  # Sort rows - important, this is the same order as when we extract values from a raster object
  arrange(desc(y), x)

ggplot(full_grid, aes(x,y)) + 
  geom_point(aes(color = i)) +
  annotate("path", 
           x = country_borders$x, 
           y = country_borders$y, 
           group = country_borders$group,
           color = "red") +
  coord_fixed()


```

### Convert data frame to raster

```{r}

# Make extent (vector of 4 values)  
extent <- c(
  min(full_grid$x) - dx/2, 
  max(full_grid$x) + dx/2, 
  min(full_grid$y) - dy/2, 
  max(full_grid$y) + dy/2)

# Make empty SpatRaster using 'terra::rast'
full_raster <- rast(
  ncol = length(unique(full_grid$x)), 
  nrow = length(unique(full_grid$y)), 
  xmin = extent[1], xmax = extent[2], 
  ymin = extent[3], ymax = extent[4]) 

# Set values of the SpatRaster
values(full_raster) <- full_grid$i

plot(full_raster)

```

### Select raster cells for a single country (example)

```{r}

borderdata <- subset(country_borders, region == "Switzerland")
border_pol_data1 <- borderdata[,c("x","y")] %>% 
  as.matrix()
border_pol_data2 <-cbind(object=1, part=1, border_pol_data1, hole=0)
border_pol <- vect(border_pol_data2, "polygons")

# Extract values of the raster 'z' that overlaps with each of the two polygons 'v'   
selected_i_values <- terra::extract(full_raster, border_pol)

if (FALSE){
  
  # plot
  ggplot(full_grid %>% filter(i %in% selected_i_values$lyr.1), aes(x,y)) + 
    geom_point() +
    annotate("path", x = country_borders$x, y = country_borders$y, group = country_borders$group,
             color = "red")
}

  
```

### Function for selecting raster cells for a single area (example)

```{r}

get_rasterdata_within_border <- function(borderdata, raster_data){
  
  border_pol_data1 <- borderdata[,c("x","y")] %>% 
    as.matrix()
  border_pol_data2 <-cbind(object=1, part=1, border_pol_data1, hole=0)
  border_pol <- vect(border_pol_data2, "polygons")

  # Extract values of the raster 'z' that overlaps with each of the two polygons 'v'   
  terra::extract(raster_data, border_pol)
  
}

if (FALSE){
  
  # test
  
  i <- country_borders %>%
    filter(region == "Switzerland") %>%
    get_rasterdata_within_border(raster_data = full_raster)
  
  ggplot(full_grid %>% filter(i %in% selected_i_values$lyr.1), aes(x,y)) + 
    geom_point() +
    annotate("path", x = country_borders$x, y = country_borders$y, group = country_borders$group,
             color = "red")
  
}
  
```

### Select spatial points based on borders

```{r}

selected_i_values <- country_borders %>%
  split(.$group) %>%
  map_df(get_rasterdata_within_border, raster_data = full_raster)

pdata_space <- full_grid %>% 
  filter(i %in% selected_i_values$lyr.1)

ggplot(pdata_space, aes(x,y)) + 
  geom_point() +
  annotate("path", 
           x = country_borders$x, 
           y = country_borders$y, 
           group = country_borders$group,
           color = "red") +
  coord_fixed()

```

### Spatial grid, downsampled if necessary

-   Not necessary! (so downsample has been set to false)

```{r}

# If you want to downsample the spatial grid  
downsample <- TRUE
downsample <- FALSE

if (downsample){
  
  by = 4
  
  # Use a regular grid in space (e.g. every 4th point)
  xs <- unique(pdata_space$x) %>% sort()
  xs <- xs[seq(1,length(xs), by = by)]
  ys <- unique(pdata_space$y) %>% sort()
  ys <- ys[seq(1,length(ys), by = by)]
  
  pdata_space_s <- pdata_space %>%
    filter(x %in% xs & y %in% ys)

} else {
  
  pdata_space_s <- pdata_space
  
}

```

### Add years to grid data  

```{r}

pdata_for_gam_allyrs <- pdata_space_s %>% mutate(year = 1992)

for (yr in 1992:2020){
  pdata_for_gam_allyrs <- bind_rows(pdata_for_gam_allyrs,
                     pdata_space_s %>% mutate(year = yr)
  )
  
}

nrow(pdata_for_gam_allyrs)

saveRDS(pdata_for_gam_allyrs, "Data/108_pdata_for_gam_allyrs.rds")

# if you want to read this directly:
# pdata_for_gam_allyrs <- readRDS("Data/108_pdata_for_gam_allyrs.rds")

```


## 6. Data summarized 

### Add gridcell to data  
```{r}

dat <- dat %>%
  mutate(
    grid_x = dx*round(x/dx),
    grid_y = dy*round(y/dy))

```


### Summarise data per 50 km squares

```{r}

# Already given above (part 5)
# dx <- 50
# dy <- 50

dat_grid1 <- dat %>%
  # Long-term data: use only sitegroup 1    
  filter(sitegroup %in% 1) %>%
  group_by(grid_x, grid_y, year) %>%
  summarize(
    across(log_no3, 
           .fns = list(mean=mean, sd=sd, median=median, min=min, max=max)),
    countryCode = paste(unique(countryCode), collapse = ", "),
    n = n(),
    n_site = length(unique(site)),
    .groups = "drop"
  ) %>%
  rename(x = grid_x, y = grid_y)


dat_grid2 <- dat %>%
  # Short-term data: All data (no filter)  
  group_by(x, y, year) %>%
  group_by(grid_x, grid_y, year) %>%
  summarize(
    across(log_no3, 
           .fns = list(mean=mean, sd=sd, median=median, min=min, max=max)),
    countryCode = paste(unique(countryCode), collapse = ", "),
    n = n(),
    n_site = length(unique(site)),
    .groups = "drop"
  ) %>%
  rename(x = grid_x, y = grid_y)


dat_grid3 <- dat %>%
  # Short-term data: All data (no filter)  
  group_by(x, y, year) %>%
  group_by(grid_x, grid_y, year) %>%
  summarize(
    across(log_no3, 
           .fns = list(mean=mean, sd=sd, median=median, min=min, max=max)),
    countryCode = paste(unique(countryCode), collapse = ", "),
    n = n(),
    n_site = length(unique(site)),
    .groups = "drop"
  ) %>%
  rename(x = grid_x, y = grid_y)


dat_grid2 <- dat %>%
  # Short-term data: All data (no filter)  
  group_by(x, y, year) %>%
  group_by(grid_x, grid_y, year) %>%
  summarize(
    across(log_no3, 
           .fns = list(mean=mean, sd=sd, median=median, min=min, max=max)),
    countryCode = paste(unique(countryCode), collapse = ", "),
    n = n(),
    n_site = length(unique(site)),
    .groups = "drop"
  ) %>%
  rename(x = grid_x, y = grid_y)


dat_grid_nyears1 <- dat_grid1 %>%
  count(x, y, name = "no_years")

dat_grid_nyears2 <- dat_grid2 %>%
  count(x, y, name = "no_years")


```




### Plots of year coverage   

```{r}

bind_rows(
  dat_grid_nyears1 %>% mutate(Groups = "1"),
  dat_grid_nyears2 %>% mutate(Groups = "1-3")) %>%
  mutate(no_years_b = cut(no_years, breaks = c(2,3,5,10,15,20,25,30), right = FALSE)) %>% 
  ggplot(aes(x, y)) +
  geom_raster(aes(fill = no_years_b)) +
  scale_fill_viridis_d() +
  coord_fixed() +
  ggtitle("Number of years") +
  facet_wrap(vars(Groups))
  

```

## 7. GAM for each water body  

### Groups of sites   

* Number of sites since 2000-

```{r}
#| fig-width: 9 
#| fig-height: 9

sitegroup_datasel <- list(
  with(dat, year >= 2000 & sitegroup %in% 1),
  with(dat, year >= 2000 & sitegroup %in% 2),
  with(dat, year >= 2000 & sitegroup %in% 3)
)

# Only very few sata from sitegroup 3 are from before 2000:
# with(dat, year >= 1992 & sitegroup %in% 3) %>% mean()
# with(dat, year >= 2000 & sitegroup %in% 3) %>% mean()

data_for_plot <- map_dfr(
  sitegroup_datasel,
  ~dat[.,] %>%
    distinct(grid_x, grid_y, site) %>%
    count(grid_x, grid_y, name = "n_sites"), 
  .id = "Site_group")

data_for_plot <- data_for_plot %>%
  mutate(n_sites = cut(n_sites, breaks = c(1,2,3,5,10,50,100,250), right = FALSE))

ggplot(data_for_plot, aes(grid_x, grid_y)) + 
  geom_tile(aes(fill = n_sites)) +
  scale_fill_viridis_d() +
  coord_fixed(xlim = c(800, 4900), ylim = c(700,4200)) +
  labs(title = "Number of sites by site group") +
  facet_wrap(vars(Site_group), labeller = label_both) +
  easy_remove_axes(what = "title")

```

### Check 'waterbody'  

```{r}

check <- dat %>%
  distinct(waterbody, waterBodyIdentifierScheme) %>%
  add_count(waterbody) %>%
  filter(n > 1)

if (nrow(check) > 0){
  stop("Same 'waterbody' occurs for different 'waterBodyIdentifierScheme'")
} else {
  message("Names of 'waterbody' checked and are unique")
}

```
### Data frame with one row per water body  

* Includes 

```{r}

df_wb <- dat %>%
  group_by(countryCode, waterbody) %>%
  summarize(
    n_rows = length(site),
    n_sites = length(unique(site)),
    n_years = length(unique(year)),
    group_1 = length(unique(site[sitegroup %in% 1])),
    group_2 = length(unique(site[sitegroup %in% 2])),
    group_3 = length(unique(site[sitegroup %in% 3])),
    .groups = "drop"
  )

nrow(df_wb)
summary(df_wb)



```

### Run GAM for each water body with sitegroup 1 or 2  

```{r}

# Add site_f 
dat <- dat  %>%
  mutate(site_f = factor(site))

```

### Test random intercept model  

* http://www.let.rug.nl/wieling/statscourse/lecture3/#21  

```{r}

dat_test <- dat %>% filter(waterbody %in% "DEGB_DEST_SAL-GW-042")

# dat_test <- dat %>% filter(waterbody %in% "DK1-15-2-8-SVENDBORGOEST")
xtabs(~site, dat_test)
xtabs(~year, dat_test)

m1 <- gam(log_no3 ~ s(year, k = 2), data = dat_test)
m2 <- gam(log_no3 ~ s(year, k = 2) + s(site_f, bs = "re"), data = dat_test)
summary(m1)
summary(m2)
# install.packages("itsadug")
library(itsadug)
plot_smooth(m1, view = "year", rug = F, main = "m1")
plot_smooth(m2, view = "year", rug = F, main = "m2", rm.ranef = T)

```

### Function for running GAM with random site effect  

```{r}

df_wb_sel <- df_wb %>%
  filter(group_1 > 0 | group_2 > 0)

quantile(df_wb_sel$n_years)

wbs <- pull(df_wb_sel, waterbody)
length(wbs)

run_gam_1 <- function(wb){
  data_sel <- dat %>% filter(waterbody %in% wb)
  n_year <- length(unique(data_sel$year))
  k_max <- min(n_year - 2, 8)
  k_max <- max(k_max, 3)
  if (length(unique(data_sel$site)) > 1){
    gam(log_no3 ~ s(year, k = k_max) + s(site_f, bs = "re"), 
        data = data_sel)
  } else {
    gam(log_no3 ~ s(year, k = k_max), data = data_sel)
  }
}

if (FALSE){
  
  m1 <- run_gam_1("DEGB_DEST_SAL-GW-042") 
  predict(m1)
  # yrs <- dat %>% filter(waterbody %in% "DEGB_DEST_SAL-GW-042") %>% pull(year)
  # predict(m1, data.frame(year = yrs))
  
  m1 <- run_gam_1("DK1-15-2-8-SVENDBORGOEST") 

}


```

### Test running several WBs   
```{r}

run_gam <- safely(run_gam_1)

set.seed(10)
wbs_test <- sample(wbs, 100)  

tic()
mod_orig <- purrr::map(wbs_test, run_gam)
toc()

mod <- transpose(mod_orig)

ok <- map_lgl(mod$error, is.null)  
# ok


# df_wb %>% filter(waterbody %in% wbs_test[!ok]) %>% View()


```

### Run all WBs    

```{r}

if (rerun_gam_fitting){
  
  tic()
  mod_orig <- purrr::map(wbs, run_gam)
  toc()   # 174 sec
  
  saveRDS(mod_orig, "Data/120_mod_orig.rds")

}

mod_orig <- readRDS("Data/120_mod_orig.rds")  

mod <- transpose(mod_orig)

ok <- map_lgl(mod$error, is.null)  
mean(ok)
length(ok)

wbs_sel <- wbs[ok]


```
### Predictions  
```{r}

if (rerun_gam_predictions){
  
  
  
}

```


## 7. GAM, interactive effects of space and time



### Datasets for each run  

* Make a list of boolean vectors, one for each run  

```{r}
#| fig-width: 9 
#| fig-height: 9

run_datasel <- list(
  with(dat, year >= 1992 & sitegroup %in% 1),
  with(dat, year >= 2000 & sitegroup %in% c(1,2,3)),
  with(dat, year >= 2000 & sitegroup %in% c(1,2)),
  with(dat, year >= 2000 & sitegroup %in% c(1))
)
names(run_datasel) <- c("Since 1992, site group 1",
                   "Since 2000, site group 1-3",
                   "Since 2000, site group 1-2",
                   "Since 2000, site group 1")

# Only very few sata from sitegroup 3 are from before 2000:
# with(dat, year >= 1992 & sitegroup %in% 3) %>% mean()
# with(dat, year >= 2000 & sitegroup %in% 3) %>% mean()

dat_grid_nsites <- map_dfr(
  run_datasel,
  ~dat[.,] %>%
    distinct(grid_x, grid_y, site) %>%
    count(grid_x, grid_y, name = "n_sites"), 
  .id = "Modelrun")

dat_grid_nsites %>%
  mutate(n_sites_b = cut(n_sites, breaks = c(1,2,3,5,10,50,100,250), 
                         right = FALSE)) %>%
  ggplot(aes(grid_x, grid_y)) + 
  geom_tile(aes(fill = n_sites_b)) +
  scale_fill_viridis_d() +
  coord_fixed(xlim = c(800, 4900), ylim = c(700,4200)) +
  labs(title = "Number of sites by model run") +
  facet_wrap(vars(Modelrun)) +
  easy_remove_axes(what = "title")

```


### Running GAMs

* 4 runs (model fits/predictions) for different datasets/time ranges    
* 1992 onwards (run 1) or 2000 onwards (run 2-4)    

```{r}


if (rerun_gam_fitting){
# if(TRUE) {
  
  # For some reason, this doesn't seem to work:
  # mod <- purrr::map(
  #   run_datasel, ~gam(log_no3 ~ s(x, y, year, k=600), data = dat[.,]))
  # (neither does a for-next loop)
  
  tic()
  mod1 <- gam(log_no3 ~ s(x, y, year, k=600), data = dat[run_datasel[[1]],])
  saveRDS(mod1, "Data/108_mod1.rds")
  mod2 <- gam(log_no3 ~ s(x, y, year, k=600), data = dat[run_datasel[[2]],])
  saveRDS(mod2, "Data/108_mod2.rds")
  mod3 <- gam(log_no3 ~ s(x, y, year, k=600), data = dat[run_datasel[[3]],])
  saveRDS(mod3, "Data/108_mod3.rds")
  mod4 <- gam(log_no3 ~ s(x, y, year, k=600), data = dat[run_datasel[[4]],])
  saveRDS(mod4, "Data/108_mod4.rds")
  toc()

}

# Read saved data  
mod1 <- readRDS("Data/108_mod1.rds")
mod2 <- readRDS("Data/108_mod2.rds")
mod3 <- readRDS("Data/108_mod3.rds")
mod4 <- readRDS("Data/108_mod4.rds")

# Put in list and remove the single models
mod <- list(mod1, mod2, mod3, mod4)
names(mod) <- names(run_datasel)

rm(mod1, mod2, mod3, mod4)

# plot(mod1) ## default plot
# plot(mod2) ## default plot

```

### Summary of model

```{r}

summary.mini <- function(modelnumber, model_list){
  model <- model_list[[modelnumber]]
  cat(names(model_list)[modelnumber], "\n")
  summ <- summary(model)
  cat("Sample size:", summ$n, "\n")
  print(summ$s.table)
  cat("Deviance explained:", summ$dev.expl, "\n\n")
}

walk(1:length(mod), summary.mini, model_list = mod)

```

## 8. Prediction on grid

### Prediction data  
```{r}

# dat[.,] contains only grid cells with data
# so pdata_space_byruns (list of 4) will also only contain grid cells with data
pdata_space_byruns <- purrr::map(
  run_datasel,
  ~distinct(dat[.,], grid_x, grid_y)
)

expand_grid_with_years <-function(griddata, years){
  map_dfr(years, 
          ~mutate(griddata, year = .) %>% 
            rename(x = grid_x, y = grid_y))
} 

# test <- expand_grid_with_years(pdata_space_byruns[[1]], 1992:2020)
# nrow(pdata_space_byruns[[1]])
# nrow(test)
# nrow(test)/29

# Data for all grid cells with data, and all years 
#  (note: all years for all grid cells, even when that cell x year combination is lacking)
pdata_byruns <- purrr::map2(
  pdata_space_byruns,
  list(1992:2020, 2000:2020, 2000:2020, 2000:2020),
  expand_grid_with_years
)

```


### Calculate predicted values

```{r}

if (rerun_gam_predictions){
# if (TRUE){
  
  # test for 100 data points
  # i <- 1
  # test <- predict(mod[[i]], newdata = pdata_byruns[[i]][1:100,], se.fit = TRUE)
  
  tic()
  
  pred <- purrr::map2(
    mod,
    pdata_byruns,
    ~ predict(.x, newdata = .y, se.fit = TRUE)
  )

  pdata <- purrr::map2(
    pred,
    pdata_byruns,
    ~ mutate(
      .y, 
      log_no3 = as.numeric(.x$fit),
      log_no3_se = as.numeric(.x$se.fit))
  )
  

  # 101 sec 
  toc()
  
  saveRDS(pdata, "Data/108_mod_pred_grid.rds")

}

if (FALSE){
  
  pdata1 <- pdata_for_gam %>%
    mutate(
      log_no3 = as.numeric(pred1$fit),
      log_no3_se = as.numeric(pred1$se.fit)
    )
  pdata2 <- pdata_for_gam %>%
    filter(year >= 2000) %>%
    mutate(
      log_no3 = as.numeric(pred2$fit),
      log_no3_se = as.numeric(pred2$se.fit)
    )
  pdata3 <- pdata_for_gam %>%
    filter(year >= 2000) %>%
    mutate(
      log_no3 = as.numeric(pred3$fit),
      log_no3_se = as.numeric(pred3$se.fit)
    )
  pdata4 <- pdata_for_gam %>%
    filter(year >= 2000) %>%
    mutate(
      log_no3 = as.numeric(pred4$fit),
      log_no3_se = as.numeric(pred4$se.fit)
    )
  
  # Add number of years with data from sitegroup = 1, and keep only cells with data 
  pdata1 <- pdata1 %>%
    left_join(dat_grid_nyears1, by = c("x","y"))
  pdata1$log_no3[is.na(pdata1$no_years)] <- NA
  
  # Add number of years with data from sitegroup = 1-3, and keep only cells with data 
  pdata2 <- pdata2 %>%
    left_join(dat_grid_nyears2, by = c("x","y"))
  pdata2$log_no3[is.na(pdata2$no_years)] <- NA
  
  # Add number of years with data from sitegroup = 1, and keep only cells with data 
  pdata3 <- pdata3 %>%
    left_join(dat_grid_nyears3, by = c("x","y"))
  pdata3$log_no3[is.na(pdata3$no_years)] <- NA
  
  # Add number of years with data from sitegroup = 1, and keep only cells with data 
  pdata4 <- pdata4 %>%
    left_join(dat_grid_nyears4, by = c("x","y"))
  pdata4$log_no3[is.na(pdata4$no_years)] <- NA
  
  saveRDS(pdata1, "Data/108_mod1_pred_grid.rds")
  saveRDS(pdata2, "Data/108_mod2_pred_grid.rds")
  saveRDS(pdata3, "Data/108_mod3_pred_grid.rds")
  saveRDS(pdata4, "Data/108_mod4_pred_grid.rds")

}

# pdata1 <- readRDS("Data/108_mod1_pred_grid.rds")
# pdata2 <- readRDS("Data/108_mod2_pred_grid.rds")
# pdata3 <- readRDS("Data/108_mod3_pred_grid.rds")
# pdata4 <- readRDS("Data/108_mod4_pred_grid.rds")

# pdata <- list(pdata1, pdata2, pdata3, pdata4)
# names(pdata) <- paste("Model run", 1:length(pdata))

pdata <- readRDS("Data/108_mod_pred_grid.rds")
names(pdata)

```
### Dataframe for selected years 

```{r}

pdata_selyr <- map_dfr(1:4, 
                         ~mutate(pdata[[.]], modelrun = .) %>%
                           filter(year %in% c(2000,2020))
)

```

#### Plot on log scale  
```{r}
#| fig-width: 9
#| fig-height: 4


gg <- ggplot(pdata_selyr, aes(x,y)) +
    geom_tile(aes(fill = log_no3),) +
    scale_fill_viridis_c(limits = c(-2.5, 2.2)) +
    # scale_fill_viridis_c(limits = c(-2,2.5)) +
    coord_fixed() +
    facet_grid(vars(year), vars(modelrun)) +
    labs(title = "Predicted NO3 concentrations, log10 scale") +
  easy_remove_axes(what = "title")

gg

  
```

#### Plot on natural scale 

```{r}
#| fig-width: 9
#| fig-height: 4

# range(10^pdata_selyr$log_no3)

gg <- pdata_selyr %>%
  mutate(
    no3 = 10^log_no3,
    no3_b = cut(no3, breaks = c(0, 0.2, 1, 2.5, 5, 10, 25, 100, 500))
  ) %>%
  ggplot(aes(x,y)) +
    geom_tile(aes(fill = no3_b),) +
    scale_fill_viridis_d() +
    coord_fixed() +
    facet_grid(vars(year), vars(modelrun)) +
    labs(title = "Predicted NO3 concentrations, log10 scale") +
  easy_remove_axes(what = "title")

gg

  
```


### Change since reference period   

* NO3 values in the reference period are set to 100    
* Difference is on ordinary scale (not on log-scale)    
* Reference period is [1992,1997) and [1997,2002) for mod1 and mod2 

```{r}

pdata_change <- left_join(
  pdata_selyr %>% 
    filter(year == 2020),
  pdata_selyr %>% 
    filter(year == 2000) %>%
    rename(log_no3_ref = log_no3) %>%
    select(x, y, modelrun, log_no3_ref), 
  by = c("x", "y", "modelrun")
) %>%
  mutate(
    log_no3_change = log_no3 - log_no3_ref,
    no3_rel = (10^log_no3_change)*100
  )

nrow(pdata_selyr)
nrow(pdata_change)

```
#### Plot on log scale  

```{r}
#| fig-width: 9
#| fig-height: 9

# range(pdata_change$log_no3_change)

gg <- ggplot(pdata_change, aes(x,y)) +
  geom_tile(aes(fill = log_no3_change),) +
  scale_fill_viridis_c(limits = c(-1, 2)) +
  coord_fixed() +
  facet_wrap(vars(modelrun), ncol = 2) +
  labs(title = "Predicted change in log10(NO3)") +
  easy_remove_axes(what = "title")

gg

  
```


#### Plot relative change  

```{r}
#| fig-width: 9
#| fig-height: 9

# range(pdata_change$no3_rel)

cols <- RColorBrewer::brewer.pal(11, "RdYlBu") %>% head(9) %>% rev()

gg <- pdata_change %>%
  mutate(
    no3_rel_b = cut(
      no3_rel, 
      breaks = c(10, 25, 50, 80, 120, 150, 200, 500, 1000, 5000))
  ) %>%
  ggplot(aes(x,y)) +
  geom_tile(aes(fill = no3_rel_b),) +
  # scale_fill_viridis_d() +
  scale_fill_manual(values = cols) +
  coord_fixed() +
  facet_wrap(vars(modelrun), ncol = 2) +
  labs(title = "Predicted change in log10(NO3)") +
  easy_remove_axes(what = "title")

gg


```

```{r}

#| fig-width: 9
#| fig-height: 4

# range(10^pdata_selyr$log_no3)

gg <- pdata_selyr %>%
  mutate(
    no3 = 10^log_no3,
    no3_b = cut(no3, breaks = c(0, 0.2, 1, 2.5, 5, 10, 25, 100, 500))
  ) %>%
  ggplot(aes(x,y)) +
    geom_tile(aes(fill = no3_b),) +
    scale_fill_viridis_d() +
    coord_fixed() +
    facet_grid(vars(year), vars(modelrun)) +
    labs(title = "Predicted NO3 concentrations, log10 scale") +
  easy_remove_axes(what = "title")

gg

  
```




### Average temporal change for all grid cells     

```{r}

log_no3_overallmean <- purrr::map(
  pdata,
  ~summarize(., log_no3_mean = mean(log_no3),
              log_no3_sd = sd(log_no3),
              .groups = "drop") 
)
bind_rows(log_no3_overallmean)

log_no3_gridmeans <- purrr::map(
  pdata,
  ~group_by(.,x, y) %>%
    summarize(log_no3_mean = mean(log_no3),
              log_no3_sd = sd(log_no3),
              .groups = "drop") 
)

pdata_dev_cell <- map2(
  pdata, log_no3_gridmeans,
  ~left_join(.x, .y, by = c("x", "y")) %>%
  mutate(
    xy = paste0(x, "_", y),
    log_no3_dev = log_no3 - log_no3_mean)
)
# head(pdata_dev[[1]])
# View(pdata_dev[[1]])

pdata_yreffect_list <- purrr::map(
  pdata_dev, 
  ~group_by(., year) %>%
  summarize(log_no3_dev = mean(log_no3_dev))
)

pdata_yreffect_list <- purrr::map(
  pdata_dev, 
  ~group_by(., x, y, year) %>%
  summarize(log_no3_dev = mean(log_no3_dev))
)
# str(pdata_yreffect_list[[1]])

pdata_yreffect_list <- purrr::map2(
  pdata_yreffect_list, log_no3_overallmean,
  ~ mutate(.x, log_no3_est = log_no3_dev + .y$log_no3_mean[1])
)

pdata_yreffect <- bind_rows(
  pdata_yreffect_list, .id = "modelrun") %>%
  mutate(
    log_no3_rel = 100*(10^log_no3_dev),
    no3_est = 10^log_no3_est
  )
str(pdata_yreffect, 1)

```


### Average temporal change for all grid cells     

```{r}

log_no3_overallmean <- purrr::map(
  pdata,
  ~summarize(., log_no3_mean = mean(log_no3),
              log_no3_sd = sd(log_no3),
              .groups = "drop")  %>%
    as.data.frame()
)
bind_rows(log_no3_overallmean)

log_no3_gridmeans <- purrr::map(
  pdata,
  ~group_by(.,x, y) %>%
    summarize(log_no3_mean = mean(log_no3),
              log_no3_sd = sd(log_no3),
              .groups = "drop") 
)

pdata_dev_all <- list()
for (i in 1:length(pdata)){
  # i <- 1
  pdata_dev_all[[i]] <- left_join(
    pdata[[i]],
    log_no3_gridmeans[[i]],
    by = c("x", "y")
  ) %>%
    mutate(
      xy = paste0(x, "_", y),
      log_no3_dev = log_no3 - log_no3_mean,
      log_no3_est = log_no3_dev + log_no3_overallmean[[i]]$log_no3_mean)
}

pdata_yreffect_list <- purrr::map(
  pdata_dev_all, 
  ~group_by(., year) %>%
  summarize(
    log_no3_dev = mean(log_no3_dev),
    log_no3_est = mean(log_no3_dev))
)

pdata_yreffect <- bind_rows(
  pdata_yreffect_list, .id = "modelrun") %>%
  mutate(
    log_no3_rel = 100*(10^log_no3_dev),
    no3_est = 10^log_no3_est
  )
str(pdata_yreffect, 1)

```


#### Plots  
```{r}

ggplot(pdata_yreffect, 
       aes(year, log_no3_dev, color = modelrun)) +
  geom_line() +
  labs(title = "Year effect, log deviance from cell mean")

ggplot(pdata_yreffect, 
       aes(year, log_no3_rel, color = modelrun)) +
  geom_line() +
  labs(title = "Year effect, relative percent")

ggplot(pdata_yreffect, 
       aes(year, log_no3_est, color = modelrun)) +
  geom_line() +
  labs(title = "Year effect, estimated log means")

ggplot(pdata_yreffect, 
       aes(year, no3_est, color = modelrun)) +
  geom_line() +
  labs(title = "Year effect, estimated mean")

```

```{r}

test <- pdata_dev[[1]] %>% filter(x==2500, y==2550)
ggplot(test, aes(year, log_no3)) +
  geom_point()
ggplot(test, aes(year, log_no3_dev)) +
  geom_point()

test <- pdata_yreffect_list[[1]]
ggplot(test, aes(year, log_no3_dev)) +
  geom_point()
ggplot(test, aes(year, log_no3_est)) +
  geom_point()

```

```{r}




ggplot(pdata[[1]], 
       aes(year, log_no3, color = paste0(x, "_", y))) +
  geom_line() +
  ggeasy::easy_remove_legend()


ggplot(pdata_dev[[1]], 
       aes(year, log_no3_dev, color = paste0(x, "_", y))) +
  geom_line() +
  ggeasy::easy_remove_legend()

ggplot(pdata_dev[[2]], 
       aes(year, log_no3_dev, color = paste0(x, "_", y))) +
  geom_line() +
  ggeasy::easy_remove_legend()

ggplot(pdata_yeareffect, aes(year, log_no3_yeareffect)) +
  # geom_ribbon(aes(
  #   ymin = log_no3_yeareffect - log_no3_yeareffect_sd,
  #   ymax = log_no3_yeareffect + log_no3_yeareffect_sd, group = model), fill = "grey70", alpha = 0.3) +
  geom_line(aes(color = model)) +
  coord_cartesian(ylim = c(-0.06, 0.06))

```




## 9. Prediction on data  




### Calculate predicted values

```{r}

#
# Note: reusing almost the same object names as in 8, 
#   but pdata renamed to 'pdatad' and the variable name 
#   'log_no3_pred' instead of 'log_no3'
#

if (FALSE){
# if (TRUE){
  
  
  tic()
  pred1 <- predict(mod1, newdata = dat %>% filter(sitegroup %in% 1), 
                   se.fit = TRUE)
  pred2 <- predict(mod2, newdata = dat %>% filter(year >= 2000), 
                   se.fit = TRUE)
  pred2b <- predict(mod2b, newdata = dat %>% filter(sitegroup %in% 1 & year >= 2000), 
                   se.fit = TRUE)
  # 94 sec 
  toc()
  
  # Only difference from 8: using 'log_no3_pred' instead of 'log_no3'  
  pdata1 <- dat %>% 
    filter(sitegroup %in% 1) %>%
    mutate(
      log_no3_pred = as.numeric(pred1$fit),
      log_no3_se = as.numeric(pred1$se.fit)
    ) %>%
    rename(
      log_no3_obs = log_no3,                   # observed data kept 
    )
  pdata2 <- dat %>% 
    filter(year >= 2000) %>%
    mutate(
      log_no3_pred = as.numeric(pred2$fit),
      log_no3_se = as.numeric(pred2$se.fit)
    ) %>%
    rename(
      log_no3_obs = log_no3,
    )
  pdata2b <- dat %>% 
    filter(sitegroup %in% 1 & year >= 2000) %>%
    mutate(
      log_no3_pred = as.numeric(pred2b$fit),
      log_no3_se = as.numeric(pred2b$se.fit)
    ) %>%
    rename(
      log_no3_obs = log_no3,
    )
  
  saveRDS(pdata1, "Data/108_mod1_pred_data.rds")
  saveRDS(pdata2, "Data/108_mod2_pred_data.rds")
  saveRDS(pdata2b, "Data/108_mod2b_pred_data.rds")

}

pdata1 <- readRDS("Data/108_mod1_pred_data.rds")
pdata2 <- readRDS("Data/108_mod2_pred_data.rds")
pdata2b <- readRDS("Data/108_mod2b_pred_data.rds")

pdatad <- list(pdata1, pdata2, pdata2b)

```


### Example: all sites within a grid cell 

```{r}

xval <- 2000
yval <- 2000
i <- 2

gg <- pdatad[[i]] %>%
  filter(grid_x == xval & grid_y == yval) %>%
  ggplot(aes(year, log_no3_pred, color = site)) +
  geom_path() +
  geom_point(aes(y = log_no3_obs))

gg

gg + facet_wrap(vars(site))

```




