---
title: "101_gam_data"
format: 
  html:
    toc: true
    code-fold: true  
editor: visual
---

-   Reading data and doing some filtering

    -   Selected and renamed variables\
    -   Data given as <loq and value >2.5 filtered out\
    -   Added x,y as geographic reference for positon in km (based on https://epsg.io/3034)

-   Saves data as "Input_data/WISE_GWNO3_sel2.rda

-   Some exploratory plots and tables

## 1. Packages

```{r, include=FALSE}

# All of these packages cn be loaded at once using library(tidyverse). (I just like to be specific.)
library(dplyr)
library(readr)
library(readxl)
library(glue)        # tidyverse, easier alternative to paste0
library(lubridate)
library(ggplot2)
library(forcats)
library(sp)
library(tictoc)

library(maps)
library(mapdata)
country_borders <- map_data("world")  

```

## 2. Read data

### Read raw data

```{r}

if (FALSE){

  # Need only to do this once (therefore wrapped in FALSE)
  # a bit slow (1-2 minutes)
  
  dat_all_site <- read_excel(
    "Input_data/WISE_Indicators.indicators2020.AggregatedData_Indicator_GWNO3.xlsx",
    col_types = "text")
  str(dat_all_site)
  saveRDS(dat_all_site,
          "Input_data/WISE_Indicators.indicators2020.AggregatedData_Indicator_GWNO3.rda")
}

```

### Read data aggregated by waterbody

```{r}

if (FALSE){

  # Need only to do this once (therefore wrapped in FALSE)
  # a bit slow (1-2 minutes)
  
  dat_all_wb <- read_excel(
    "Input_data/WISE_Indicators.indicators2020.AggregatedDataByWaterBody_Indicator_GWNO3.xlsx",
    col_types = "text")
  str(dat_all_wb)
  saveRDS(dat_all_wb,
          "Input_data/WISE_Indicators.indicators2020.AggregatedDataByWaterBody_Indicator_GWNO3.rda")
}

```

### Filter data for OK measurements (resultMeanValue)

-   Also sets NO3 data to numeric etc.\

```{r}

# Need only to do this once (therefore wrapped in FALSE)
  
if (FALSE){
  
  # Read data
  dat_all <- readRDS(
    "Input_data/WISE_Indicators.indicators2020.AggregatedData_Indicator_GWNO3.rda")

  # Extract all 
  x1 <- dat_all %>%
    filter(resultMeanValue != "NULL") %>%
    pull(resultMeanValue)
  
  # Checks
  if (FALSE){
    table(addNA(substr(x1,1,1)))
    table(addNA(substr(x1,2,2)))
    # Some are exponent numbers ("1E-3")
    x1[substr(x1,2,2) == "E"]
  }
  
  # Test convert to numeric (as.numeric)
  x2 <- as.numeric(x1)
  
  # Check 1
  x2_exponent <- x2[substr(x1,2,2) == "E"]
  if (sum(is.na(x2_exponent)) > 0)
    stop("Some exponent numbers are not converted to numbers")
  
  # Check 2
  if (sum(is.na(x2)) > 0)
    stop("Some numbers are not converted to numbers")
  
  # Check that all are 'GW' 
  table(addNA(dat_all$waterBodyCategory))
  
  # Check that all are 'Nitrate'
  table(addNA(dat_all$eeaIndicator))
  
  # Check that all are 'mg{no3}/L'
  table(addNA(dat_all$resultUom))
  
  # NOTE: Several different
  table(addNA(dat_all$procedureAnalysedFraction))
  
  # loq indicator
  # Just a few (13) are NULL after we have filtered away 
  #   resultMeanValue = NULL
  head(dat_all$resultQualityMeanBelowLOQ, 200)
  table(addNA(dat_all$resultQualityMeanBelowLOQ))
  
  dat <- dat_all %>%
    filter(resultMeanValue != "NULL",
           resultQualityMeanBelowLOQ %in% c("0","1")) %>%
    mutate(resultMeanValue = as.numeric(resultMeanValue))  %>%
    select(countryCode, 
           monitoringSiteIdentifier, monitoringSiteIdentifierScheme, monitoringSiteName,
           waterBodyIdentifier, waterBodyIdentifierScheme, waterBodyName, spatialUnitName,  
           procedureAnalysedFraction, 
           phenomenonTimeReferenceYear, resultQualityMeanBelowLOQ, resultMeanValue, 
           lat, lon)
  
  
  table(addNA(dat$resultQualityMeanBelowLOQ))
  
  # names(dat) %>% paste(collapse = ", ")
  
  saveRDS(dat,
          "Data/WISE_GWNO3_sel.rda")

  
}


```

### Read site data for analysis

```{r}

dat_01a <- readRDS("Data/WISE_GWNO3_sel.rda")

```

### Add data aggregated by waterbody

-   Only used where the water body has no site data

```{r}

dat_all_wb1 <- readRDS("Input_data/WISE_Indicators.indicators2020.AggregatedDataByWaterBody_Indicator_GWNO3.rda")

dat_all_wb2 <- dat_all_wb1 %>%
  filter(resultMeanValue != "NULL",
         resultQualityMeanBelowLOQ %in% c("0","1")) %>%
  mutate(resultMeanValue = as.numeric(resultMeanValue))  %>%
  select(countryCode, 
         # monitoringSiteIdentifier, monitoringSiteIdentifierScheme, monitoringSiteName,
         waterBodyIdentifier, waterBodyIdentifierScheme, waterBodyName, spatialUnitName,  
         procedureAnalysedFraction, 
         phenomenonTimeReferenceYear, resultQualityMeanBelowLOQ, resultMeanValue, 
         lat, lon)

wb1 <- unique(dat_01a$waterBodyIdentifier)
wb2 <- unique(dat_all_wb1$waterBodyIdentifier)
cat("Number of water bodies in 1) site data set and 2) water body data set: \n")
length(wb1)
length(wb2)

wb_lacking <- setdiff(wb2, wb1)

cat("Number of water bodies lacking in site data set: \n")
length(wb_lacking)

# Check
# sum(wb_lacking %in% wb1)

#
# Add aggregated data for the lacking water bodies  
# We use waterBodyIdentifier in place of monitoringSiteIdentifier (later just called 'site')
#

dat_01b <- bind_rows(
    dat_01a %>%
      mutate(
        datatype = "Site"
      ),
    dat_all_wb2 %>%
      filter(
        waterBodyIdentifier %in% wb_lacking) %>%
      mutate(
        datatype = "Waterbody",
        monitoringSiteIdentifier = waterBodyIdentifier)  # use waterBodyIdentifier in place of monitoringSiteIdentifier
  )

cat("Nmber of rows before and afetr: \n")
nrow(dat_01a)
nrow(dat_01b)

```

### Filter values under loq and with value \> 2.5

```{r}

check <- dat_01b %>%
  filter(resultQualityMeanBelowLOQ %in% "1")

if (FALSE){

  stem(check$resultMeanValue)
  sort(check$resultMeanValue, decreasing = TRUE) %>% head(100)
  sum(check$resultMeanValue > 2.5)
  mean(check$resultMeanValue > 2.5)
  
}
  
dat_02 <- dat_01b %>%
  filter(!(resultQualityMeanBelowLOQ %in% "1" & resultMeanValue > 2.5)) %>%
  rename(no3 = resultMeanValue,
         site = monitoringSiteIdentifier,
         waterbody = waterBodyIdentifier,
         year = phenomenonTimeReferenceYear) %>%
  mutate(loq = ifelse(resultQualityMeanBelowLOQ == "1", "Under loq", "Over loq"),
         year = as.numeric(year),
         lon = as.numeric(lon) %>% round(3),
         lat = as.numeric(lat) %>% round(3)) %>%
  select(-resultQualityMeanBelowLOQ)

nrow(dat_01b)
nrow(dat_02)

```

### Remove duplicates in 'site'   

* 21 sites have two coordinates (and as much as 50 km apart)   
* But they differ in 'monitoringSiteIdentifierScheme' ('monitoringSiteIdentifierScheme' or 'eumonitoringSiteIdentifierScheme')  
* Add 'ei' or 'eu' to those 21 sites  

```{r}

# 21 sites have two coordinates (and as much as 50 km apart)  
df_dupl_sites <- dat_02 %>%
  distinct(site, lon, lat) %>%
  add_count(site) %>%
  filter(n > 1)   

dupl_sites <- df_dupl_sites %>%
  pull(site) %>% 
  unique()

cat("Number of duplicate sites:", length(dupl_sites), "\n")

dat_dupl_sites <- dat_02 %>%
  select(site, monitoringSiteIdentifierScheme, lon, lat) %>%
  filter(site %in% dupl_sites)

dat_02 <- dat_02 %>%
  mutate(
    scheme = substr(monitoringSiteIdentifierScheme, 1, 2),   
    site = case_when(
      site %in% dupl_sites ~ paste0(site, "_", scheme),
      TRUE ~ site)
  )

df_dupl_sites2 <- dat_02 %>%
  distinct(site, lon, lat) %>%
  add_count(site) %>%
  filter(n > 1)   

dupl_sites2 <- df_dupl_sites2 %>%
  pull(site) %>% 
  unique()

cat("Number of duplicate sites:", length(dupl_sites2), "\n")


```

### Filter by year and geographic spread

#### Map

```{r}

dat_02 %>%
  distinct(lon, lat, countryCode, site) %>%
  count(lon, lat, countryCode, name = "Number_of_sites") %>%
  ggplot(aes(lon, lat, color = countryCode, size = Number_of_sites)) +
  # annotation_map(country_borders, fill = "lightgreen") +
  geom_point() +
  annotation_map(country_borders, fill = NA, color = "red")

```

#### Filter

- Europe only  
- Data from 1992 onwards only  

```{r}

dat <- dat_02 %>%
  filter(lat > 27 & lon > -15,
         year >= 1992)
  
```

### Add transformed coordinates

-   Unit meters

```{r}

# These works on WIndows but not in Jupyterhub (se reformulatins below)
# crs_longlat <- "+init=epsg:4326"
# crs_ETRS89_extended <- "+init=epsg:3034"

crs_longlat <- "+proj=longlat +datum=WGS84"
crs_ETRS89_extended <- "+proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs"

SP <- SpatialPoints(dat[,c("lon", "lat")],
         proj4string = CRS(crs_longlat)
         )
SP_trans <- spTransform(SP, CRS(crs_ETRS89_extended))

# Add transformed coords to data set
dat$x_orig <- SP_trans@coords[,1]
dat$y_orig <- SP_trans@coords[,2]

# Check
# range(dat$x_orig, na.rm =TRUE)  
# range(dat$y_orig, na.rm =TRUE)  

# Km from lat = 27 & lon = -15
SP_origo <- SpatialPoints(data.frame(lon = -15, lat = 27),
         proj4string=CRS(crs_longlat))
SP_origo_t <- spTransform(SP_origo, CRS(crs_ETRS89_extended))

# Define x, y 
dat$x <- (dat$x_orig - SP_origo_t@coords[,1])/1000
dat$y <- (dat$y_orig - SP_origo_t@coords[,2])/1000

# Check
# range(dat$x, na.rm =TRUE)  
# range(dat$y, na.rm =TRUE)  

dat %>%
  distinct(x, y, countryCode, site) %>%
  count(x, y, countryCode, name = "Number_of_sites") %>%
  ggplot(aes(x, y, color = countryCode, size = Number_of_sites)) +
  # annotation_map(country_borders, fill = "lightgreen") +
  geom_point() +
  annotation_map(country_borders, fill = NA, color = "red") +
  labs(title = "Coordinates in km from lat 27, lon-15")

```

### Also transform 'country_borders'

```{r}

if (FALSE){
  
  # Need only to do this once (therefore wrapped in FALSE)
  
  SP <- SpatialPoints(country_borders[,c("long", "lat")],
                      proj4string=CRS(crs_longlat)
  )
  SP_trans <- spTransform(SP, CRS(crs_ETRS89_extended))
  
  # Define x, y 
  country_borders$x <- (SP_trans@coords[,1] - SP_origo_t@coords[,1])/1000
  country_borders$y <- (SP_trans@coords[,2] - SP_origo_t@coords[,2])/1000

  saveRDS(country_borders, "Input_data/country_borders.rda")

}

```

## 3. Save somewhat filtered data 

```{r}

saveRDS(dat, "Input_data/WISE_GWNO3_sel2.rda")

```

## 4. Data patterns

### Number of sites per country

```{r}

dat1 <- dat %>%
  count(countryCode, name = "Number_of_data") %>%
  arrange(desc(Number_of_data)) %>%
  mutate(countryCode = fct_inorder(countryCode))

ggplot(dat1, aes(countryCode, Number_of_data)) +
  geom_col() +
  coord_flip()

dat2 <- dat %>%
  distinct(site, countryCode) %>%
  count(countryCode, name = "Number_of_sites") %>%
  arrange(desc(Number_of_sites)) %>%
  mutate(countryCode = fct_inorder(countryCode))

ggplot(dat2, aes(countryCode, Number_of_sites)) +
  geom_col() +
  coord_flip()

gg <- ggplot(left_join(dat1, dat2), aes(Number_of_sites, Number_of_data)) + 
  geom_text(aes(label = countryCode), size = 3)

gg
gg + scale_x_log10() + scale_y_log10()

```

### Number of sites per country per year

```{r}

sel_countries <- head(dat1$countryCode, 16)

dat %>%
  filter(countryCode %in% sel_countries) %>%
  distinct(countryCode, year, site) %>%
  count(countryCode, year, name = "no_of_sites") %>%
  ggplot(aes(year, no_of_sites)) +
  geom_point() + 
  geom_line() +
  facet_wrap(vars(countryCode))


```

#### Example of country data

```{r}

dat %>%
  filter(countryCode == "PL") %>%
  distinct(countryCode, year, site) %>%
  # filter(year < 2014) %>%
  ggplot(aes(year, site)) +
  geom_point() +
  theme(axis.text.y = element_blank())


```

#### Types of time series

```{r}

dat_summ <- dat %>%
  filter(countryCode == "PL") %>%
  distinct(countryCode, year, site) %>%
  group_by(countryCode, site) %>%
  summarize(
    min_year = min(year),
    max_year = max(year),
    n_year = length(unique(year)), .groups = "drop"
  ) %>%
  count(countryCode, min_year, max_year, n_year, name = "Number_of_sites") %>%
  arrange(desc(Number_of_sites)) %>%
  mutate(n_perc = Number_of_sites/sum(Number_of_sites)*100) %>%
  mutate(n_cum_perc = cumsum(n_perc))

dat_summ %>% 
  filter(n_cum_perc < 80)  

```

### Number of sites and waterbodies

```{r}

dat %>%
  distinct(site, year) %>%
  count(year, name = "Number_of_sites") %>%
  ggplot(aes(year, Number_of_sites)) +
  geom_point()

dat %>%
  distinct(waterbody, year) %>%
  count(year, name = "Number_of_waterbodies") %>%
  ggplot(aes(year, Number_of_waterbodies)) +
  geom_point()

```

### Length of time covered vs. number of years

#### Site level  

```{r}

dat %>%
  distinct(site, year) %>%
  group_by(site) %>%
  summarise(
    Number_of_years = n(),
    Length_of_series = max(year)-min(year)+1,
    First_year = min(year),
    First_year_before_2000 = First_year < 2000) %>%
  count(Length_of_series, Number_of_years, First_year_before_2000) %>%

  ggplot(aes(Length_of_series, Number_of_years, size = n, color = n)) +
  geom_point() +
  facet_wrap(vars(First_year_before_2000), labeller = label_both) +
  ggtitle("Number of site")
  

```

#### Waterbody level  

```{r}

dat %>%
  distinct(waterbody, year) %>%
  group_by(waterbody) %>%
  summarise(
    Number_of_years = n(),
    Length_of_series = max(year)-min(year)+1,
    First_year = min(year),
    First_year_before_2000 = First_year < 2000) %>%
  count(Length_of_series, Number_of_years, First_year_before_2000) %>%
  ggplot(aes(Length_of_series, Number_of_years, size = n, color = n)) +
  geom_point() +
  facet_wrap(vars(First_year_before_2000), labeller = label_both) +
  ggtitle("Number of waterbody level")

```

### Countries

```{r}

dat %>%
  distinct(countryCode, site, year) %>%
  count(countryCode, year, name = "Number_of_sites") %>%
  ggplot(aes(year, countryCode, size = Number_of_sites)) +
  geom_point()

dat %>%
  distinct(countryCode, waterbody, year) %>%
  count(countryCode, year, name = "Number_of_waterbodies") %>%
  ggplot(aes(year, countryCode, size = Number_of_waterbodies)) +
  geom_point()

```

### Geographic spread

#### By decade

```{r}


dat %>%
  mutate(
    lon = floor(lon),
    lat = floor(lat),
    Decade = 10*floor(year/10)
  ) %>%
  distinct(lon, lat, countryCode, site, Decade) %>%
  count(lon, lat, countryCode, Decade, name = "Number_of_sites") %>%
  ggplot(aes(lon, lat, color = countryCode, size = Number_of_sites)) +
  annotation_map(country_borders, fill = "lightgreen") +
  geom_point() +
  facet_wrap(vars(Decade))  +
  annotation_map(country_borders, fill = NA, color = "red")


```

## 5. Selection of sites  

### Select groups 1, 2, 3a    

```{r}

dat_sites <- dat %>%
  distinct(site, x, y, year) %>%
  group_by(site, x, y) %>%
  summarise(
    Number_of_years = n(),
    Years_span = max(year)-min(year)+1,
    First_year = min(year),
    First_year_before_2000 = First_year < 2000,
    .groups = "drop") %>%
  as.data.frame()

cat("Number of sites:", nrow(dat_sites), "\n")

#
# Check if some sites have nore than one coordinate
#
check <- dat_sites %>%
  add_count(site) %>%
  filter(n > 1) %>%
  arrange(site) 

if (nrow(check) > 0)
  stop("Some sites have nore than one coordinate")

#
# 'Number_of_years' needs to be at least 2
#
dat_sites <- dat_sites %>%
  filter(Number_of_years >= 2)

cat("Number of sites after removing '1-years':", nrow(dat_sites), "\n")

#
# Group 1 - always include these:
#
dat_sites_group1 <- dat_sites %>%
  filter(First_year_before_2000 & Number_of_years >= 10  & Years_span >= 20)

cat("Number of sites in group 1 ('always include'):", nrow(dat_sites_group1), "\n")

#
# Group 2 - always include for analyses after 2000:
#
dat_sites_group2 <- dat_sites %>%
  filter(!site %in% dat_sites_group1$site) %>%
  filter(Number_of_years >= 4  & Years_span >= 12)

cat("Number of sites in group 2 ('always include after 2000'):", nrow(dat_sites_group2), "\n")

#
# Possibly include these (if close to others):
# 3a = before distance selection, 3b will be after distance selection  
#
dat_sites_group3a <- dat_sites %>%
  filter(!site %in% c(dat_sites_group1$site, dat_sites_group2$site))

cat("Number of sites in group 3a ('possibly include'):", nrow(dat_sites_group3a), "\n")

```


#### Distance   


```{r}
#| echo: false
#| results: false

# TEST of 'distances' package

# my_data_points <- data.frame(x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
#                              y = c(10, 9, 8, 7, 6, 6, 7, 8, 9, 10))
# my_distances1 <- distances(my_data_points)
# my_distances1
# nn <- nearest_neighbor_search(my_distances1, 4)
# nn
# distance_columns(my_distances1, c(1,5,6,9))

```



```{r}

if (FALSE){
  
  # Do only once 
  #   if 
  
  # https://github.com/fsavje/distances
  # install.packages("distances")
  # help(package = "distances")
  if (!"distances" %in% installed.packages())
    install.packages("distances")
  library(distances)
  
  # Calculate distances - quick    
  tic()
  dist1 <- distances(dat_sites, dist_variables = c("x","y"), id_variable = "site")
  toc()
  # 6.561 sec elapsed
  
  # showing the first 20
  # dist1
  
  sites1 <- dat_sites_group1$site 
  sites2 <- dat_sites_group2$site
  sites12 <- c(sites1, sites2)
  sites3a <- dat_sites_group3a$site # %>% head(1000)  
  
  #
  # extract the columns of the matrix that corresponds to sites in group 3a  
  # ("distance-from" sites)
  #
  tic()
  dist2 <- distance_columns(dist1, which(attr(dist1, "ids") %in% sites3a))
  toc()  # 13 seconds  
  dim(dist2)
  
  #
  # extract the rows ("distance-to" sites) that corresponds to sites in group 1 + 2
  #
  tic()
  dist3 <- dist2[sites12,]
  toc() # 2 sec
  
  dim(dist3) 
  
  # Saving 'dist3' is slow
  # tic()
  # saveRDS(dist3, "Data/101_dist3.rds")
  # toc()  # 1 minute?  
  
  # For each site in 3a find shortest distance to a group 1 site   
  tic()
  min_dist_group3a <- apply(dist3, 2, min)
  toc()   # 6 seconds  
  
  length(min_dist_group3a)  
  
  saveRDS(min_dist_group3a, "Data/101_min_dist_group3a.rds")
  
}

min_dist_group3a <- readRDS("Data/101_min_dist_group3a.rds")

brks <- seq(0, 50*ceiling(max(min_dist_group3a)/50), 50)
hist(min_dist_group3a, breaks = brks)
hist(min_dist_group3a[min_dist_group3a <= 50], breaks = seq(0,50,5))


```
### Select by distance (group 3b)
```{r}

#
# Include these (close enough to others):
# 3a = before distance selection, 3b = after distance selection  
#

# USe 50 km as minimum distance  
sites3b <- names(min_dist_group3a[min_dist_group3a <= 50])

dat_sites_group3b <- dat_sites_group3a %>%
  filter(site %in% sites3b)

cat("Number of sites in group 3a ('possibly include'):", nrow(dat_sites_group3a), "\n")
cat("Number of sites in group 3b ('include because close to others'):", nrow(dat_sites_group3b), "\n")

```



## 3. Save filtered data 

```{r}

dat_selected <- bind_rows(
  dat_sites_group1 %>% mutate(Sitegroup = 1),
  dat_sites_group2 %>% mutate(Sitegroup = 2),
  dat_sites_group3b %>% mutate(Sitegroup = 3)
)

saveRDS(dat_selected, "Input_data/WISE_GWNO3_sel3.rda")

```



### Interactive map

```{r}

library(leaflet)  

dat_pos_country <-  dat %>%
  group_by(countryCode) %>%
  summarize(lon = mean(lon), lat = mean(lat)) 

dat_summary_country <- dat %>%
  distinct(countryCode, waterbody, year) %>%
  count(countryCode, year, name = "Number_of_waterbodies") %>%
  group_by(countryCode) %>%
  summarise(
    Yr1 = min(year), Yr2 = max(year), Year_span = Yr2-Yr1+1, 
    N_year = length(unique(year)), N_year_missing = Year_span-N_year,
    Number_of_waterbodies = round(mean(Number_of_waterbodies),0)
  ) %>%
  left_join(dat_pos_country)


```

```{r}

leaflet() %>%
  addTiles() %>%
  addMarkers(
    lng = dat_summary_country$lon, lat = dat_summary_country$lat,
    popup = with(dat_summary_country, 
                 glue("{countryCode}<br>Year_span = {Year_span} ({Yr1} - {Yr2})<br>{N_year_missing} missing years<br>{Number_of_waterbodies} waterbodies"))
  )

# DE, DK, BE, AT, LI, SI (NL, LU, CH) - from 1990 (parantheses: 2000 or later)
# NO, SE - from 2004
# PL, CZ, SK - from 2001-2004
# HR, BA, RS, ME, XK, MK, AL, BG, RO, EL (Greece)
# LT, LV, EE (1990), FI 
```
